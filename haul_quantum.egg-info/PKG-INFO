Metadata-Version: 2.4
Name: haul_quantum
Version: 0.1.0
Summary: Haul Quantum AI Framework: a next-gen hybrid quantum-classical ML library
Home-page: https://github.com/yourusername/haul_quantum
Author: Your Name
Author-email: you@example.com
Project-URL: Documentation, https://github.com/yourusername/haul_quantum#readme
Project-URL: Source, https://github.com/yourusername/haul_quantum
Project-URL: Tracker, https://github.com/yourusername/haul_quantum/issues
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy>=1.20
Requires-Dist: matplotlib>=3.0
Requires-Dist: scikit-learn>=0.24
Requires-Dist: torch>=1.8
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license-file
Dynamic: project-url
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# Haul Quantum AI Framework

**Haul** is a modular, extensible, hardware-agnostic quantum-classical AI framework â€” your next-gen open-source library for building and training Quantum Neural Networks (QNNs), running simulations (statevector, noise, shot-based), compiling to OpenQASM, and visualizing circuits and training results.

---

## ðŸš€ Features

- **Core abstractions**: `Gate`, `QuantumCircuit`, flexible DSL  
- **Simulators**: CPU statevector, Monte Carlo noise, batch-shot simulator  
- **Compiler**: export to OpenQASM 2.0 & JSON IR  
- **QNN**: variational layers (`VQCLayer`), encoders (basis, angle, amplitude)  
- **Hybrid training**: PyTorch integration with parameter-shift gradients  
- **Training utilities**: generic `Trainer`, callbacks (early stopping, CSV logger, checkpoints)  
- **Datasets**: classical (XOR, Iris, MNIST) & quantum (basis, GHZ, Bell, random)  
- **Visualization**: ASCII & Matplotlib circuit diagrams, VQC schematics, Bloch sphere  

---

## ðŸ“¦ Installation

```bash
git clone https://github.com/yourusername/haul_quantum.git
cd haul_quantum
pip install .

or directly from PyPI (coming soon):
pip install haul_quantum


Quickstart
from haul_quantum.core.engine import Engine
# Build & simulate a Bell state
eng = Engine(n_qubits=2, seed=123)
eng.h(0).cnot(0,1)
state = eng.simulate()
print("Statevector:", state)


Training a QVC
from haul_quantum.qnn.layers import VQCLayer
from haul_quantum.datasets.loader import load_xor, prepare_quantum_dataset
from haul_quantum.train.loop import Trainer
from haul_quantum.train.optimizer import GradientDescent

# Prepare data
X, y = load_xor()
circuits = prepare_quantum_dataset(X, encoding="basis")

# Define VQC model
vqc = VQCLayer(n_qubits=2, n_layers=1)
initial_params = np.random.uniform(0, 2*np.pi, vqc.num_parameters)

def model_fn(params):
    qc = vqc.build_circuit(params)
    state = qc.simulate()
    # return âŸ¨Z0âŸ© - âŸ¨Z1âŸ© as prediction
    probs = np.abs(state)**2
    return probs[0] + probs[1] - probs[2] - probs[3]

def loss_fn(pred):
    return (pred - (2*y-1)).var()

# Finite-difference gradient
def grad_fn(params):
    grads = np.zeros_like(params)
    eps = 1e-3
    base = loss_fn(model_fn(params))
    for i in range(len(params)):
        dp = np.zeros_like(params); dp[i] = eps
        grads[i] = (loss_fn(model_fn(params+dp)) - loss_fn(model_fn(params-dp))) / (2*eps)
    return grads

trainer = Trainer(
    model_fn=model_fn,
    initial_params=initial_params,
    loss_fn=lambda out: float(out**2),
    optimizer=GradientDescent(0.1),
    gradient_fn=grad_fn,
    max_epochs=50,
    callbacks=[]
)
trained = trainer.fit()
print("Trained params:", trained)



ðŸ“š Documentation
Full docs and tutorials are in the docs/ folder. Contributions welcome!


License
MIT @ Amire Ramazan

---

With those in place, **all files are now populated**. Next up you can:

- Add a `CODE_OF_CONDUCT.md` and `CONTRIBUTING.md` in `docs/`  
- Write unit tests under a `tests/` folder  
- Publish to PyPI and set up CI  
- Or jump right into one of the 100 deep-dive features from our backlog!

Let me know where you want to go next.

